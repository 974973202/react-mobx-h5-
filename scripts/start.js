'use strict';

//首先要这样做，以便任何读取它的代码都知道正确的env。
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// 确保读取环境变量。
require('../config/env');


const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
/**
 * clearConsole
 * 希望以跨平台的方式清除控制台
 */
const clearConsole = require('react-dev-utils/clearConsole');
/**
 * checkRequiredFiles
 * 确保所有传递的文件都存在。
    文件名应该是绝对的。
    如果找不到文件，则输出警告消息并返回false。
 */
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  /**
   * choosePort(host: string, defaultPort: number): Promise<number | null>
   * defaultPort如果用户确认可以执行，则返回解析为任一端口或下一个可用端口的Promise 。
   * 如果端口被占用且用户拒绝使用其他端口，或者终端不是交互式且无法向用户提供选择，则解析为null
   */
  choosePort,
  /**
   * createCompiler(webpack: Function, config: Object, appName: string, urls: Object, useYarn: boolean): WebpackCompiler
   * 使用内置的有用消息为WebpackDevServer创建Webpack编译器实例。
   * 将require('webpack')入口点作为第一个参数。要提供urls参数，请使用prepareUrls()下面描述的内容
   */
  createCompiler,
  /**
   * prepareProxy(proxySetting: string, appPublicFolder: string): Object
   * proxy从中的proxy设置创建WebpackDevServer 配置对象package.json
   */
  prepareProxy,
  /**
   * prepareUrls(protocol: string, host: string, port: number): Object
   * 返回具有开发服务器的本地和远程URL的对象。将此对象传递给createCompiler()上述。
   */
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
// openBrowser
// 尝试使用给定的URL打开浏览器。
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// 如果缺少所需的文件，则发出警告并崩溃
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3333;
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(
    `Learn more here: ${chalk.yellow('http://bit.ly/CRA-advanced-config')}`
  );
  console.log();
}

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('react-dev-utils/browsersHelper');
checkBrowsers(paths.appPath, isInteractive)
  .then(() => {
    //我们尝试使用默认端口，但如果它很忙，我们将向用户提供
    //在其他端口上运行。`chooseport（）` promise解析为下一个可用端口。
    return choosePort(HOST, DEFAULT_PORT);
  })
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const config = configFactory('development');
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, port);
    // 创建使用自定义消息配置的WebPack编译器.
    const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // 加载代理配置
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
